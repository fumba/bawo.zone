{"version":3,"sources":["AI.ts"],"names":["Utility_1","require","AI","computeBestMove","board","moves","clone","getAllAvailableValidMoves","getCurrentPlayer","getRandomInt","length","minimax","depth","nodeIndex","maximizingPlayer","values","alpha","beta","best","Number","MIN_VALUE","i","val","Math","max","console","log","min","exports","MAX_VALUE"],"mappings":"mCAAA,IAAAA,UAAAC,QAAA,cAuBAC,GAAA,WAAA,SAAAA,KA+EA,OAxEgBA,EAAAC,gBAAd,SAA8BC,GAC5B,IACMC,EADoBD,EAAME,QACMC,0BACpCH,EAAMI,oBAGR,OADaH,EAAML,UAAA,QAAQS,aAAaJ,EAAMK,UAOlCR,EAAAS,QAAd,SACEC,EACAC,EACAC,EACAC,EACAC,EACAC,GAIA,GAAa,GAATL,EAAY,OAAOG,EAAOF,GAE9B,GAAIC,EAAkB,CAKpB,IAJA,IAAII,EAAOC,OAAOC,UAITC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAMC,EAAMpB,EAAGS,QACbC,EAAQ,EACI,EAAZC,EAAgBQ,GAChB,EACAN,EACAC,EACAC,GAQF,GANAC,EAAOK,KAAKC,IAAIN,EAAMI,GACtBN,EAAQO,KAAKC,IAAIR,EAAOE,GAExBO,QAAQC,IAAIV,EAAOE,GAGfD,GAAQD,EAAO,MAErB,OAAOE,EAMP,IAJIA,EAAOC,OAAOC,UAITC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACpBC,EAAMpB,EAAGS,QACbC,EAAQ,EACI,EAAZC,EAAgBQ,GAChB,EACAN,EACAC,EACAC,GAQF,GANAC,EAAOK,KAAKI,IAAIT,EAAMI,GACtBL,EAAOM,KAAKI,IAAIV,EAAMC,GAEtBO,QAAQC,IAAIV,EAAOE,GAGfD,GAAQD,EAAO,MAErB,OAAOE,GAGbhB,EA/EA,GAiFA0B,QAAA,QAAe1B,GAGf,IAAMa,OAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GACtCU,QAAQC,IACN,0BACExB,GAAGS,QAAQ,EAAG,GAAG,EAAMI,OAAQI,OAAOC,UAAWD,OAAOU","file":"AI.min.js","sourcesContent":["import Utility from \"../Utility\";\nimport Board from \"./Board\";\nimport Move from \"./Move\";\n\n/*\n * bawo.zone - <a href=\"https://bawo.zone\">https://bawo.zone</a>\n * <a href=\"https://github.com/fumba/bawo.zone\">https://github.com/fumba/bawo.zone</a>\n *\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass AI {\n  /**\n   * Computes the best move that the computer can perform\n   *\n   * @param {Board} board the board on which the move will be performed on\n   * @returns {Move} the best move that the CPU can make\n   */\n  public static computeBestMove(board: Board): Move {\n    const boardClone: Board = board.clone();\n    const moves: Array<Move> = boardClone.getAllAvailableValidMoves(\n      board.getCurrentPlayer()\n    );\n    const move = moves[Utility.getRandomInt(moves.length)];\n    return move;\n  }\n\n  // Returns optimal value for\n  // current player (Initially called\n  // for root and maximizer)\n  public static minimax(\n    depth: number,\n    nodeIndex: number,\n    maximizingPlayer: boolean,\n    values: Array<number>,\n    alpha: number,\n    beta: number\n  ): number {\n    // Terminating condition. i.e\n    // leaf node is reached\n    if (depth == 3) return values[nodeIndex];\n\n    if (maximizingPlayer) {\n      let best = Number.MIN_VALUE;\n\n      // Recur for left and\n      // right children\n      for (let i = 0; i < 2; i++) {\n        const val = AI.minimax(\n          depth + 1,\n          nodeIndex * 2 + i,\n          false,\n          values,\n          alpha,\n          beta\n        );\n        best = Math.max(best, val);\n        alpha = Math.max(alpha, best);\n\n        console.log(alpha, best);\n\n        // Alpha Beta Pruning\n        if (beta <= alpha) break;\n      }\n      return best;\n    } else {\n      let best = Number.MIN_VALUE;\n\n      // Recur for left and\n      // right children\n      for (let i = 0; i < 2; i++) {\n        const val = AI.minimax(\n          depth + 1,\n          nodeIndex * 2 + i,\n          true,\n          values,\n          alpha,\n          beta\n        );\n        best = Math.min(best, val);\n        beta = Math.min(beta, best);\n\n        console.log(alpha, best);\n\n        // Alpha Beta Pruning\n        if (beta <= alpha) break;\n      }\n      return best;\n    }\n  }\n}\n\nexport default AI;\n\n// Driver Code\nconst values = [3, 5, 6, 9, 1, 2, 0, -1];\nconsole.log(\n  \"The optimal value is : \" +\n    AI.minimax(0, 0, true, values, Number.MIN_VALUE, Number.MAX_VALUE)\n);\n"]}