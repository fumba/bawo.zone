{"version":3,"sources":["AI.ts"],"names":[],"mappings":";;AAAA,sCAAiC;AAIjC;;;;;;;;;;;;;;;;;;GAkBG;AACH;IAAA;IA+EA,CAAC;IA9EC;;;;;OAKG;IACW,kBAAe,GAA7B,UAA8B,KAAY;QACxC,IAAM,UAAU,GAAU,KAAK,CAAC,KAAK,EAAE,CAAC;QACxC,IAAM,KAAK,GAAgB,UAAU,CAAC,yBAAyB,CAC7D,KAAK,CAAC,gBAAgB,EAAE,CACzB,CAAC;QACF,IAAM,IAAI,GAAG,KAAK,CAAC,oBAAO,CAAC,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;QACvD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,4BAA4B;IAC5B,mCAAmC;IACnC,0BAA0B;IACZ,UAAO,GAArB,UACE,KAAa,EACb,SAAiB,EACjB,gBAAyB,EACzB,MAAqB,EACrB,KAAa,EACb,IAAY;QAEZ,6BAA6B;QAC7B,uBAAuB;QACvB,IAAI,KAAK,IAAI,CAAC;YAAE,OAAO,MAAM,CAAC,SAAS,CAAC,CAAC;QAEzC,IAAI,gBAAgB,EAAE;YACpB,IAAI,IAAI,GAAG,MAAM,CAAC,SAAS,CAAC;YAE5B,qBAAqB;YACrB,iBAAiB;YACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC1B,IAAM,GAAG,GAAG,EAAE,CAAC,OAAO,CACpB,KAAK,GAAG,CAAC,EACT,SAAS,GAAG,CAAC,GAAG,CAAC,EACjB,KAAK,EACL,MAAM,EACN,KAAK,EACL,IAAI,CACL,CAAC;gBACF,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;gBAC3B,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBAE9B,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBAEzB,qBAAqB;gBACrB,IAAI,IAAI,IAAI,KAAK;oBAAE,MAAM;aAC1B;YACD,OAAO,IAAI,CAAC;SACb;aAAM;YACL,IAAI,IAAI,GAAG,MAAM,CAAC,SAAS,CAAC;YAE5B,qBAAqB;YACrB,iBAAiB;YACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC1B,IAAM,GAAG,GAAG,EAAE,CAAC,OAAO,CACpB,KAAK,GAAG,CAAC,EACT,SAAS,GAAG,CAAC,GAAG,CAAC,EACjB,IAAI,EACJ,MAAM,EACN,KAAK,EACL,IAAI,CACL,CAAC;gBACF,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;gBAC3B,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBAE5B,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBAEzB,qBAAqB;gBACrB,IAAI,IAAI,IAAI,KAAK;oBAAE,MAAM;aAC1B;YACD,OAAO,IAAI,CAAC;SACb;IACH,CAAC;IACH,SAAC;AAAD,CA/EA,AA+EC,IAAA;AAED,qBAAe,EAAE,CAAC;AAElB,cAAc;AACd,IAAM,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACzC,OAAO,CAAC,GAAG,CACT,yBAAyB;IACvB,EAAE,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,SAAS,CAAC,CACrE,CAAC","file":"AI.js","sourcesContent":["import Utility from \"../Utility\";\nimport Board from \"./Board\";\nimport Move from \"./Move\";\n\n/*\n * bawo.zone - <a href=\"https://bawo.zone\">https://bawo.zone</a>\n * <a href=\"https://github.com/fumba/bawo.zone\">https://github.com/fumba/bawo.zone</a>\n *\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass AI {\n  /**\n   * Computes the best move that the computer can perform\n   *\n   * @param {Board} board the board on which the move will be performed on\n   * @returns {Move} the best move that the CPU can make\n   */\n  public static computeBestMove(board: Board): Move {\n    const boardClone: Board = board.clone();\n    const moves: Array<Move> = boardClone.getAllAvailableValidMoves(\n      board.getCurrentPlayer()\n    );\n    const move = moves[Utility.getRandomInt(moves.length)];\n    return move;\n  }\n\n  // Returns optimal value for\n  // current player (Initially called\n  // for root and maximizer)\n  public static minimax(\n    depth: number,\n    nodeIndex: number,\n    maximizingPlayer: boolean,\n    values: Array<number>,\n    alpha: number,\n    beta: number\n  ): number {\n    // Terminating condition. i.e\n    // leaf node is reached\n    if (depth == 3) return values[nodeIndex];\n\n    if (maximizingPlayer) {\n      let best = Number.MIN_VALUE;\n\n      // Recur for left and\n      // right children\n      for (let i = 0; i < 2; i++) {\n        const val = AI.minimax(\n          depth + 1,\n          nodeIndex * 2 + i,\n          false,\n          values,\n          alpha,\n          beta\n        );\n        best = Math.max(best, val);\n        alpha = Math.max(alpha, best);\n\n        console.log(alpha, best);\n\n        // Alpha Beta Pruning\n        if (beta <= alpha) break;\n      }\n      return best;\n    } else {\n      let best = Number.MIN_VALUE;\n\n      // Recur for left and\n      // right children\n      for (let i = 0; i < 2; i++) {\n        const val = AI.minimax(\n          depth + 1,\n          nodeIndex * 2 + i,\n          true,\n          values,\n          alpha,\n          beta\n        );\n        best = Math.min(best, val);\n        beta = Math.min(beta, best);\n\n        console.log(alpha, best);\n\n        // Alpha Beta Pruning\n        if (beta <= alpha) break;\n      }\n      return best;\n    }\n  }\n}\n\nexport default AI;\n\n// Driver Code\nconst values = [3, 5, 6, 9, 1, 2, 0, -1];\nconsole.log(\n  \"The optimal value is : \" +\n    AI.minimax(0, 0, true, values, Number.MIN_VALUE, Number.MAX_VALUE)\n);\n"]}